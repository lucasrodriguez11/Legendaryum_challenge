package tests

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"

	// Importa tus paquetes internos
	"legendaryum/internal/auth"
	"legendaryum/internal/config"
	"legendaryum/pkg/models"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func TestAuthRegister(t *testing.T) {
	// Setup de la aplicaci√≥n Fiber
	app := fiber.New()

	// Cargar configuraci√≥n del .env
	cfg, err := config.Load()
	if nil != err {
		t.Fatalf("‚ùå No se pudo cargar la configuraci√≥n: %v", err)
	}

	// Configuraci√≥n para el test (JWT todav√≠a hardcodeado, pero DB del .env)
	// cfg := &config.Config{
	// 	JWTSecret: "testsecretkey12345678901234567890",
	// 	JWTExpiry: "24h",
	// }

	// Conexi√≥n a la base de datos real usando configuraci√≥n del .env
	// dsn := "host=localhost user=postgres password=postgres dbname=legendaryum_db port=5432 sslmode=disable"
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPass, cfg.DBName)
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		t.Fatalf("‚ùå No se pudo conectar a la base de datos: %v", err)
	}
	t.Log("‚úÖ Conexi√≥n a base de datos establecida")

	// Migraci√≥n autom√°tica de tablas
	if err := db.AutoMigrate(&models.User{}); err != nil {
		t.Fatalf("‚ùå No se pudo migrar el modelo User: %v", err)
	}
	t.Log("‚úÖ Migraci√≥n de tablas completada")

	// Generar email √∫nico para evitar conflictos
	timestamp := time.Now().UnixNano()
	testEmail := fmt.Sprintf("test_%d@example.com", timestamp)
	t.Logf("üìß Email de prueba: %s", testEmail)

	//  INICIAR TRANSACCI√ìN AQU√ç
	tx := db.Begin()
	if tx.Error != nil {
		t.Fatalf("‚ùå No se pudo iniciar la transacci√≥n: %v", tx.Error)
	}
	t.Log("üîÑ Transacci√≥n iniciada")

	// Asegurar rollback en caso de panic
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
			t.Logf("üö® Panic detectado, rollback ejecutado: %v", r)
		}
	}()

	// Rollback autom√°tico al final del test
	defer func() {
		if err := tx.Rollback().Error; err != nil {
			t.Logf("‚ö†Ô∏è Error en rollback: %v", err)
		} else {
			t.Log("üîô Rollback ejecutado - base de datos limpia")
		}
	}()

	//  CONFIGURAR HANDLER CON LA TRANSACCI√ìN
	h := auth.NewHandler(tx, cfg) // Usar 'tx' en lugar de 'db'
	app.Post("/auth/register", h.Register)
	t.Log("üéØ Handler configurado con transacci√≥n")

	// Preparar payload del test
	payload := map[string]interface{}{
		"first_name": "Lucas Nahuel",
		"last_name":  "Rodriguez",
		"email":      testEmail,
		"password":   "test1230",
	}
	body, _ := json.Marshal(payload)
	t.Log("üì¶ Payload preparado")

	//  CREAR REQUEST HTTP CON HTTPTEST
	req := httptest.NewRequest(http.MethodPost, "/auth/register", bytes.NewReader(body))
	req.Header.Set("Content-Type", "application/json")
	t.Log("üì® Request HTTP creado con httptest")

	//  EJECUTAR EL TEST CON HTTPTEST
	t.Log("üöÄ Ejecutando request...")
	resp, err := app.Test(req, -1) // app.Test usa httptest internamente
	if err != nil {
		t.Fatalf("‚ùå Error ejecutando request: %v", err)
	}

	// Verificar status code
	assert.Equal(t, http.StatusCreated, resp.StatusCode, "El status code deber√≠a ser 201 Created")
	if resp.StatusCode == http.StatusCreated {
		t.Log("‚úÖ Status code correcto: 201 Created")
	} else {
		t.Logf("‚ùå Status code incorrecto: %d", resp.StatusCode)
	}

	// Verificar que el usuario se cre√≥ en la base de datos (dentro de la transacci√≥n)
	var user models.User
	result := tx.Where("email = ?", testEmail).First(&user)

	// Assertions detalladas
	assert.NoError(t, result.Error, "El usuario deber√≠a existir en la base de datos")
	if result.Error == nil {
		t.Log("‚úÖ Usuario encontrado en la base de datos (dentro de transacci√≥n)")

		assert.Equal(t, "Lucas Nahuel", user.FirstName, "El nombre deber√≠a coincidir")
		assert.Equal(t, "Rodriguez", user.LastName, "El apellido deber√≠a coincidir")
		assert.Equal(t, testEmail, user.Email, "El email deber√≠a coincidir")

		// Verificar que la contrase√±a fue hasheada
		assert.NotEqual(t, "test1230", user.PasswordHash, "La contrase√±a deber√≠a estar hasheada")
		assert.NotEmpty(t, user.PasswordHash, "La contrase√±a hasheada no deber√≠a estar vac√≠a")

		t.Logf("‚úÖ Datos del usuario verificados:")
		t.Logf("   - ID=%s", user.ID)
		t.Logf("   - Nombre: %s", user.FirstName)
		t.Logf("   - Apellido: %s", user.LastName)
		t.Logf("   - Email: %s", user.Email)
		t.Logf("   - Password hasheada: %s", user.PasswordHash[:20]+"...")
	} else {
		t.Logf("‚ùå Usuario no encontrado: %v", result.Error)
	}

	t.Log("üéâ Test completado exitosamente")
}

// Test adicional para verificar que la limpieza funciona
func TestDatabaseCleanup(t *testing.T) {
	//  CONECTAR A LA BASE DE DATOS REAL (SIN TRANSACCI√ìN)
	dsn := "host=localhost user=postgres password=postgres dbname=legendaryum_db port=5432 sslmode=disable"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		t.Fatalf("‚ùå No se pudo conectar a la base de datos: %v", err)
	}

	//  INICIAR TRANSACCI√ìN PARA ESTE TEST TAMBI√âN
	tx := db.Begin()
	if tx.Error != nil {
		t.Fatalf("‚ùå No se pudo iniciar la transacci√≥n: %v", tx.Error)
	}
	defer tx.Rollback()

	// Verificar que no hay usuarios de test en la base de datos real
	var count int64
	tx.Model(&models.User{}).Where("email LIKE ?", "test_%@example.com").Count(&count)

	assert.Equal(t, int64(0), count, "No deber√≠a haber usuarios de test en la base de datos real")
	if count == 0 {
		t.Log("‚úÖ Base de datos limpia - no hay usuarios de test residuales")
	} else {
		t.Logf("‚ö†Ô∏è  Encontrados %d usuarios de test en la base de datos real", count)

		// Si hay usuarios residuales, mostrarlos
		var users []models.User
		tx.Where("email LIKE ?", "test_%@example.com").Find(&users)
		for _, u := range users {
			t.Logf("   - Usuario residual: ID=%s, Email=%s", u.ID, u.Email)
		}
	}
}
